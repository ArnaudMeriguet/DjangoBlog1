from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import time
import unittest

class NewVisitorTest(unittest.TestCase):

    def setUp(self):
        self.browser=webdriver.Firefox()

    def tearDown(self):
        self.browser.quit()
    
    def test_startAndRetrieveList(self):

        #Want to access app
        self.browser.get('http://127.0.0.1:8000/post/cv')

        #has "Arnaud Meriguet" in the titel and header
        self.assertIn ('Arnaud Meriguet', self.browser.title)

        #has 'CV' in the h2 tag
        cv_h2_text=self.browser.find_element_by_id('CVh2').text
        self.assertEqual('My CV',cv_h2_text)

        #The user is invited to add a skill to the list
        inputbox=self.browser.find_element_by_id('idNewSkill')
        self.assertEqual(inputbox.get_attribute('placeholder'),'Enter a skill')

        #in the CV page, the user enters a skill
        #types "Python" into a textbox
        inputbox.send_keys('Python')

        #hits Enter, page updates, page has now a skill named "Python"
        inputbox.send_keys(Keys.ENTER)
        time.sleep(2)

        table=self.browser.find_element_by_id('idListSkills')
        rows=table.find_elements_by_tag_name('tr')
        #self.assertTrue(any(row.text=='1: Python' for row in rows),f"New skill did not appear in table. Contents were:\n{table.text}")
        self.assertIn('Python',[row.text for row in rows])

        #the box is still here waiting for more imputs
        #User inputs "Funtional testing"
        inputbox=self.browser.find_element_by_id('idNewSkill')
        inputbox.send_keys('Functional testing')
        inputbox.send_keys(Keys.ENTER)
        time.sleep(2)

        #page updates, both "python" and "Functional testing" can be seen on the CV
        table=self.browser.find_element_by_id('idListSkills')
        rows=table.find_elements_by_tag_name('tr')
        self.assertIn('Python',[row.text for row in rows])
        self.assertIn('Functional testing',[row.text for row in rows])

        #A URL has been generated by the site. 
        #Clicks on it, the CV remembers the inputs
        self.fail('FINISH THE TEST!')

if __name__=='__main__':
    unittest.main(warnings='ignore')